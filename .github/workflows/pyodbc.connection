import pyodbc
from unittest import mock
import unittest

# Función que vamos a testear
def connect_to_db():
    connection_string = "DRIVER={SQL Server};SERVER=localhost;DATABASE=mi_db;UID=mi_usuario;PWD=mi_contraseña"
    conn = pyodbc.connect(connection_string)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM mi_tabla")
    return cursor.fetchall()

# Mock para pyodbc.connect
class TestDatabaseConnection(unittest.TestCase):

    @mock.patch('pyodbc.connect')
    def test_connect_to_db(self, mock_connect):
        # Crear un mock para el cursor y los resultados de la consulta
        mock_connection = mock.Mock()
        mock_cursor = mock.Mock()
        mock_connect.return_value = mock_connection
        mock_connection.cursor.return_value = mock_cursor
        mock_cursor.fetchall.return_value = [('fila1_col1', 'fila1_col2'), ('fila2_col1', 'fila2_col2')]

        # Llamar a la función y verificar el resultado
        resultado = connect_to_db()
        self.assertEqual(resultado, [('fila1_col1', 'fila1_col2'), ('fila2_col1', 'fila2_col2')])

        # Verificar que las funciones fueron llamadas correctamente
        mock_connect.assert_called_once()
        mock_connection.cursor.assert_called_once()
        mock_cursor.execute.assert_called_once_with("SELECT * FROM mi_tabla")
        mock_cursor.fetchall.assert_called_once()

if __name__ == "__main__":
    unittest.main()
