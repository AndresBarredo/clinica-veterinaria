import streamlit as st
import requests
import plotly.express as px
import pandas as pd
import matplotlib.pyplot as plt

# URL del microservicio FastAPI
API_URL = "http://fastapi:8000"

# Funci√≥n para obtener las estad√≠sticas
def obtener_estadisticas():
    response = requests.get(f"{API_URL}/estadisticas/")
    if response.status_code == 200:
        return response.json()
    else:
        st.error("Error al obtener estad√≠sticas.")
        return None

# Inicializar el Dashboard
st.title("Dashboard de Seguimiento y Actualizaci√≥n üêæ")

# Secci√≥n de estad√≠sticas
st.header("Estad√≠sticas Generales")

# Bot√≥n para actualizar estad√≠sticas
if st.button("Actualizar Estad√≠sticas"):
    estadisticas = obtener_estadisticas()

    # Mostrar estad√≠sticas actualizadas
    if estadisticas:
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.subheader('üê∂ Due√±os Registrados')
            st.markdown(f"<h1 style='text-align: center;'>{estadisticas['due√±os']}</h1>", unsafe_allow_html=True)
        with col2:
            st.subheader('üêæ Mascotas Registradas')
            st.markdown(f"<h1 style='text-align: center;'>{estadisticas['mascotas']}</h1>", unsafe_allow_html=True)
        with col3:
            st.subheader('üìÜ Citas Registradas')
            st.markdown(f"<h1 style='text-align: center;'>{estadisticas['citas']}</h1>", unsafe_allow_html=True)
        with col4:
            st.subheader('üí∏ Ingresos Totales')
            st.markdown(f"<h1 style='text-align: center;'>${estadisticas['ingresos']:.2f}</h1>", unsafe_allow_html=True)
        with col5:
            st.subheader('üßæ Recibos Generados')
            st.markdown(f"<h1 style='text-align: center;'>{estadisticas['recibos']}</h1>", unsafe_allow_html=True)

    # Crear las gr√°ficas a partir de las estad√≠sticas
    st.header("üìä An√°lisis Gr√°fico")

    # Gr√°fica: Due√±os vs Ingresos
    if "nombres_due√±os" in estadisticas and "ingresos_por_due√±o" in estadisticas:
        nombres_due√±os = estadisticas["nombres_due√±os"]
        ingresos_due√±os = estadisticas["ingresos_por_due√±o"]

        # Crear los datos para la gr√°fica
        data_due√±os = {
            "Due√±os": nombres_due√±os,
            "Ingresos": ingresos_due√±os,
        }

        fig, ax = plt.subplots(figsize=(10, 6))

        # Configurar el fondo
        fig.patch.set_facecolor('lightgreen')
        ax.set_facecolor('lightgreen')

        # Crear las barras
        ax.bar(data_due√±os["Due√±os"], data_due√±os["Ingresos"], color='skyblue', edgecolor='black')

        # A√±adir etiquetas y t√≠tulo
        ax.set_title('üê∂ Due√±os vs üí∏ Ingresos Totales', fontsize=16, weight='bold')
        ax.set_xlabel('Due√±os', fontsize=12)
        ax.set_ylabel('Ingresos Totales (‚Ç¨)', fontsize=12)
        ax.tick_params(axis='x', rotation=45, labelsize=10)  # Rotar etiquetas de nombres
        ax.tick_params(axis='y', labelsize=10)

        # Ajustar ticks y estilos
        plt.grid(axis='y', linestyle='--', linewidth=0.5)

        # Mostrar la gr√°fica en el Dashboard
        st.pyplot(fig)

    else:
        st.error("No se pudieron cargar las estad√≠sticas. Presiona el bot√≥n para reintentar.")
else:
    # Mostrar mensaje inicial o por defecto
    st.info("Presiona el bot√≥n 'Actualizar Estad√≠sticas' para cargar los datos.")
